@using Teleoffice.Models
@using System.Collections.Generic
@using Microsoft.AspNet.Identity.EntityFramework
@model dynamic

@{
    ViewData["Title"] = "Appointment";
}
<style>
    #main video {
        width: 540px;
        height: 360px;
        margin: 0px;
        padding: 10px;
    }

    #preview video {
        margin: 0px;
        width: 160px;
        height: 100px;
        padding: 5px;
    }
</style>


<div class="row">
    <div id="preview" ></div>
    <div  id="main" ></div>
    @*<video id="preview" width="160" height="100" controls>
            </video>
    <video id="main" width="540" height="360" controls></video>*@

</div>
<div class="row">
@*<button class="btn btn-success col-md-offset-3" id="start">Start</button>*@
<button class="btn btn-danger" id="end">End</button>
    </div>


<script src="http://code.jquery.com/jquery-2.2.0.js"></script>
<script type="text/javascript" src="https://api.bistri.com/bistri.conference.min.js"></script>
<script src="~/js/time.js"></script>

<script type="text/javascript">
    //$(document).ready(function () {
    //    $('#start').click(function (event) {
    //        document.getElementById('#start').disabled = true;
    //        document.getElementById('#alert').hide = true;
            onBistriConferenceReady = function () {
                var localStream;
                var remoteStream;

                // initialize API client with application keys
                // if you don't have your own, you can get them at:
                // https://api.developers.bistri.com/login
                bc.init({
                    appId: "9d95f39a",
                    appKey: "e7335fcc5d600860adc4c13fd60cc178"
                });

                // test if the browser is WebRTC compatible
                if (!bc.isCompatible()) {
                    // if the browser is not compatible, display an alert
                    alert("your browser is not WebRTC compatible !");
                    // then stop the script execution
                    return;
                }

                /* Set events handler */

                // when local user is connected to the server
                bc.signaling.bind("onConnected", function () {
                    // ask the user to access to his webcam and set the resolution to 320x240
                    bc.startStream("webcam-sd", function (stream) {
                        // set "localStream" variable with the local stream
                        localStream = stream;
                        // insert the local webcam stream into the page body, mirror option invert the display
                        bc.attachStream(stream, document.getElementById('preview'), { mirror: true });
                        // join a conference room called "conference_demo" and limit conference to 4 participants
                        bc.joinRoom("conf_@ViewBag.app.Id", 4);
                    });
                });

                // when the user has joined a room
                bc.signaling.bind("onJoinedRoom", function (result) {
                    // set room members array in a var "roomMembers"
                    var roomMembers = result.members;
                    // then, for every single members already present in the room ...
                    for (var i = 0, max = roomMembers.length; i < max; i++) {
                        // ... request a call
                        bc.call(roomMembers[i].id, "conf_@ViewBag.app.Id", { stream: localStream });
                    }
                });

                // when a new remote stream is received
                bc.streams.bind("onStreamAdded", function (remoteStream) {
                    // insert the new remote stream into the page body
                    bc.attachStream(remoteStream, document.getElementById('main'));
                });

                // when a stream has been stopped
                bc.streams.bind("onStreamClosed", function (stream) {
                    // remove the stream from the page
                    bc.detachStream(stream);
                });

                // open a new session on the server
                bc.connect();
            }
        //    });
        //});
    
</script>

